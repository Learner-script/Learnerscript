{"version":3,"file":"ajax.min.js","sources":["../src/ajax.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * Standard Ajax wrapper for LearnerScript Reports. It calls the central Ajax script,\n *\n * @module     block_learnerscript/ajax\n * @class      ajax\n * @package\n * @copyright  2017 Naveen kumar <naveen@eabyas.in>\n */\ndefine(['jquery', 'core/config', 'core/log', 'core/modal_factory'], function($, config, Log, ModalFactory) {\n    // Keeps track of when the user leaves the page so we know not to show an error.\n    var unloading = false;\n    /**\n     * Success handler. Called when the ajax call succeeds. Checks each response and\n     * resolves or rejects the deferred from that request.\n     *\n     * @method requestSuccess\n     * @private\n     * @param {object} response containing error, exception and data attributes.\n     */\n    var requestSuccess = function(response) {\n        // Call each of the success handlers.\n        var request = this;\n        if (response === null) {\n            return;\n        }\n        if (response.error) {\n            // There was an error with the request as a whole.\n            // We need to reject each promise.\n            // Unfortunately this may lead to duplicate dialogues, but each Promise must be rejected.\n            if (response.cap || response.debuginfo || response.errorcode) {\n                var msg = response.msg || response.error;\n                ModalFactory.create({\n                    title: response.type || response.errorcode,\n                    body: '<p>' + msg + '</p>',\n                    footer: '',\n                }).done(function(modal) {\n                    var dialogue = modal;\n                    // Display the dialogue.\n                    dialogue.show();\n                });\n            } else {\n                Log.error(response.type + ': ' + response.msg);\n            }\n            request.deferred.reject(response);\n            return;\n        }\n        var exception;\n        // We may not have responses for all the requests.\n        if (typeof response !== \"undefined\") {\n            // Call the done handler if it was provided.\n            request.deferred.resolve(response);\n        } else {\n            // This is not an expected case.\n            exception = new Error('missing response');\n        }\n        // Something failed, reject the remaining promises.\n        if (typeof(exception) !== 'undefined' && exception !== null) {\n            request.deferred.reject(exception);\n        }\n    };\n    /**\n     * Fail handler. Called when the ajax call fails. Rejects all deferreds.\n     *\n     * @method requestFail\n     * @private\n     * @param {jqXHR} jqXHR The ajax object.\n     * @param {string} textStatus The status string.\n     * @param {Error|Object} exception The error thrown.\n     */\n    var requestFail = function(jqXHR, textStatus, exception) {\n        // Reject all the promises.\n        var request = this;\n        if (unloading) {\n            // No need to trigger an error because we are already navigating.\n            Log.error(\"Page unloaded.\");\n            Log.error(exception);\n        } else {\n            Log.error(\"Page Not Responding.\");\n            Log.error(exception);\n            request.deferred.reject(exception);\n        }\n    };\n    return /** @alias module:core/ajax */ {\n        // Public variables and functions.\n        /**\n         * Make a series of ajax requests and return all the responses.\n         *\n         * @method call\n         * @param {Object[]} request Array of requests with each containing methodname and args properties.\n         *                   done and fail callbacks can be set for each element in the array, or the\n         *                   can be attached to the promises returned by this function.\n         * @param {Boolean} async Optional, defaults to true.\n         *                  If false - this function will not return until the promises are resolved.\n         * @param {Boolean} loginrequired Optional, defaults to true.\n         *                  If false - this function will call the faster nologin ajax script - but\n         *                  will fail unless all functions have been marked as 'loginrequired' => false\n         *                  in services.php\n         * @return {Promise[]} Array of promises that will be resolved when the ajax call returns.\n         */\n        call: function(request, async, loginrequired) {\n            $(window).bind('beforeunload', function() {\n                unloading = true;\n            });\n            var ajaxRequestData,\n                promise = {};\n            if (typeof loginrequired === \"undefined\") {\n                loginrequired = true;\n            }\n            if (typeof async === \"undefined\") {\n                async = true;\n            }\n            ajaxRequestData = request.args;\n            request.deferred = $.Deferred();\n            promise = request.deferred.promise();\n            // Allow setting done and fail handlers as arguments.\n            // This is just a shortcut for the calling code.\n            if (typeof request.done !== \"undefined\") {\n                request.deferred.done(request.done);\n            }\n            if (typeof request.fail !== \"undefined\") {\n                request.deferred.fail(request.fail);\n            }\n            ajaxRequestData = JSON.stringify(ajaxRequestData);\n            var settings = {\n                type: 'POST',\n                data: ajaxRequestData,\n                context: request,\n                dataType: 'json',\n                processData: false,\n                global: true,\n                async: async,\n                contentType: \"application/json\",\n                beforeSend: function() {\n                    // Handle the beforeSend event\n                    return request.loading && $(request.loading).show();\n                },\n                success: function() {\n                    return request.loading && $(request.loading).hide('fast');\n                    // Handle the complete event\n                }\n            };\n            // Jquery deprecated done and fail with async=false so we need to do this 2 ways.\n            if (async) {\n                $.ajax(request.url + '?sesskey=' + config.sesskey, settings).done(requestSuccess).fail(requestFail);\n            } else {\n                settings.success = requestSuccess;\n                settings.error = requestFail;\n                $.ajax(request.url + '?sesskey=' + config.sesskey, settings);\n            }\n            return promise;\n        }\n    };\n});\n"],"names":["define","$","config","Log","ModalFactory","unloading","requestSuccess","response","error","cap","debuginfo","errorcode","msg","create","title","type","body","footer","done","modal","show","this","deferred","reject","exception","resolve","Error","requestFail","jqXHR","textStatus","call","request","async","loginrequired","window","bind","ajaxRequestData","promise","args","Deferred","fail","settings","data","JSON","stringify","context","dataType","processData","global","contentType","beforeSend","loading","success","hide","ajax","url","sesskey"],"mappings":"AAsBAA,kCAAO,CAAC,SAAU,cAAe,WAAY,uBAAuB,SAASC,EAAGC,OAAQC,IAAKC,kBAErFC,WAAY,EASZC,eAAiB,SAASC,aAGT,OAAbA,YAGAA,SAASC,UAILD,SAASE,KAAOF,SAASG,WAAaH,SAASI,UAAW,KACtDC,IAAML,SAASK,KAAOL,SAASC,MACnCJ,aAAaS,OAAO,CAChBC,MAAOP,SAASQ,MAAQR,SAASI,UACjCK,KAAM,MAAQJ,IAAM,OACpBK,OAAQ,KACTC,MAAK,SAASC,OACEA,MAENC,eAGbjB,IAAIK,MAAMD,SAASQ,KAAO,KAAOR,SAASK,KApBpCS,KAsBFC,SAASC,OAAOhB,mBAGxBiB,eAEoB,IAAbjB,SA3BGc,KA6BFC,SAASG,QAAQlB,UAGzBiB,UAAY,IAAIE,MAAM,oBAGtB,MAAOF,WAnCGH,KAoCFC,SAASC,OAAOC,aAY5BG,YAAc,SAASC,MAAOC,WAAYL,WAGtCnB,WAEAF,IAAIK,MAAM,kBACVL,IAAIK,MAAMgB,aAEVrB,IAAIK,MAAM,wBACVL,IAAIK,MAAMgB,WAPAH,KAQFC,SAASC,OAAOC,mBAGM,CAiBlCM,KAAM,SAASC,QAASC,MAAOC,eAC3BhC,EAAEiC,QAAQC,KAAK,gBAAgB,WAC3B9B,WAAY,SAEZ+B,gBACAC,aACyB,IAAlBJ,gBACPA,eAAgB,QAEC,IAAVD,QACPA,OAAQ,GAEZI,gBAAkBL,QAAQO,KAC1BP,QAAQT,SAAWrB,EAAEsC,WACrBF,QAAUN,QAAQT,SAASe,eAGC,IAAjBN,QAAQb,MACfa,QAAQT,SAASJ,KAAKa,QAAQb,WAEN,IAAjBa,QAAQS,MACfT,QAAQT,SAASkB,KAAKT,QAAQS,UAG9BC,SAAW,CACX1B,KAAM,OACN2B,KAHJN,gBAAkBO,KAAKC,UAAUR,iBAI7BS,QAASd,QACTe,SAAU,OACVC,aAAa,EACbC,QAAQ,EACRhB,MAAOA,MACPiB,YAAa,mBACbC,WAAY,kBAEDnB,QAAQoB,SAAWlD,EAAE8B,QAAQoB,SAAS/B,QAEjDgC,QAAS,kBACErB,QAAQoB,SAAWlD,EAAE8B,QAAQoB,SAASE,KAAK,iBAKtDrB,MACA/B,EAAEqD,KAAKvB,QAAQwB,IAAM,YAAcrD,OAAOsD,QAASf,UAAUvB,KAAKZ,gBAAgBkC,KAAKb,cAEvFc,SAASW,QAAU9C,eACnBmC,SAASjC,MAAQmB,YACjB1B,EAAEqD,KAAKvB,QAAQwB,IAAM,YAAcrD,OAAOsD,QAASf,WAEhDJ"}