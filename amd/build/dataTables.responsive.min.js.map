{"version":3,"file":"dataTables.responsive.min.js","sources":["../src/dataTables.responsive.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/* ! Responsive 2.5.0\n * Â© SpryMedia Ltd - datatables.net/license\n */\n\n(function(factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD\n        define(['jquery', 'block_learnerscript/datatables'], function($) {\n            return factory($, window, document);\n        });\n    } else if (typeof exports === 'object') {\n        // CommonJS\n        var jq = require('jquery');\n        var cjsRequires = function(root, $) {\n            if (!$.fn.dataTable) {\n                require('block_learnerscript/datatables')(root, $);\n            }\n        };\n        var module;\n        if (typeof window === 'undefined') {\n            module.exports = function(root, $) {\n                if (!root) {\n                    // CommonJS environments without a window global must pass a\n                    // root. This will give an error otherwise\n                    root = window;\n                }\n\n                if (!$) {\n                    $ = jq(root);\n                }\n\n                cjsRequires(root, $);\n                return factory($, root, root.document);\n            };\n        } else {\n            cjsRequires(window, jq);\n            module.exports = factory(jq, window, window.document);\n        }\n    } else {\n        // Browser\n        var jQuery;\n        factory(jQuery, window, document);\n    }\n}(function($, window, document, undefined) {\n'use strict';\nvar DataTable = $.fn.dataTable;\n\n\n/**\n * @module block_learnerscript/dataTables.responsive\n * @summary     Responsive\n * @description Responsive tables plug-in for DataTables\n * @version     2.5.0\n * @author      SpryMedia Ltd\n * @copyright   SpryMedia Ltd.\n *\n * This source file is free software, available under the following license:\n *   MIT license - http://datatables.net/license/mit\n *\n * This source file is distributed in the hope that it will be useful, but\n * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\n * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details.\n *\n * For details please refer to: http://www.datatables.net\n */\n\n/**\n * Responsive is a plug-in for the DataTables library that makes use of\n * DataTables' ability to change the visibility of columns, changing the\n * visibility of columns so the displayed columns fit into the table container.\n * The end result is that complex tables will be dynamically adjusted to fit\n * into the viewport, be it on a desktop, tablet or mobile browser.\n *\n * Responsive for DataTables has two modes of operation, which can used\n * individually or combined:\n *\n * * Class name based control - columns assigned class names that match the\n *   breakpoint logic can be shown / hidden as required for each breakpoint.\n * * Automatic control - columns are automatically hidden when there is no\n *   room left to display them. Columns removed from the right.\n *\n * In additional to column visibility control, Responsive also has built into\n * options to use DataTables' child row display to show / hide the information\n * from the table that has been hidden. There are also two modes of operation\n * for this child row display:\n *\n * * Inline - when the control element that the user can use to show / hide\n *   child rows is displayed inside the first column of the table.\n * * Column - where a whole column is dedicated to be the show / hide control.\n *\n * Initialisation of Responsive is performed by:\n *\n * * Adding the class `responsive` or `dt-responsive` to the table. In this case\n *   Responsive will automatically be initialised with the default configuration\n *   options when the DataTable is created.\n * * Using the `responsive` option in the DataTables configuration options. This\n *   can also be used to specify the configuration options, or simply set to\n *   `true` to use the defaults.\n *\n *  @class\n *  @param {object} settings DataTables settings object for the host table\n *  @param {object} [opts] Configuration options\n *  @requires jQuery 1.7+\n *  @requires DataTables 1.10.3+\n *\n *  @example\n *      $('#example').DataTable( {\n *        responsive: true\n *      } );\n *    } );\n */\nvar Responsive = function(settings, opts) {\n    // Sanity check that we are using DataTables 1.10 or newer\n    if (!DataTable.versionCheck || !DataTable.versionCheck('1.10.10')) {\n        throw 'DataTables Responsive requires DataTables 1.10.10 or newer';\n    }\n\n    this.s = {\n        childNodeStore: {},\n        columns: [],\n        current: [],\n        dt: new DataTable.Api(settings)\n    };\n\n    // Check if responsive has already been initialised on this table\n    if (this.s.dt.settings()[0].responsive) {\n        return;\n    }\n\n    // Details is an object, but for simplicity the user can give it as a string\n    // or a boolean\n    if (opts && typeof opts.details === 'string') {\n        opts.details = {type: opts.details};\n    } else if (opts && opts.details === false) {\n        opts.details = {type: false};\n    } else if (opts && opts.details === true) {\n        opts.details = {type: 'inline'};\n    }\n\n    this.c = $.extend(true, {}, Responsive.defaults, DataTable.defaults.responsive, opts);\n    settings.responsive = this;\n    this._constructor();\n};\n\n$.extend(Responsive.prototype, {\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Constructor\n     */\n\n    /**\n     * Initialise the Responsive instance\n     *\n     * @private\n     */\n    _constructor: function() {\n        var that = this;\n        var dt = this.s.dt;\n        var dtPrivateSettings = dt.settings()[0];\n        var oldWindowWidth = $(window).innerWidth();\n\n        dt.settings()[0]._responsive = this;\n\n        // Use DataTables' throttle function to avoid processor thrashing on\n        // resize\n        $(window).on(\n            'resize.dtr orientationchange.dtr',\n            DataTable.util.throttle(function() {\n                // IOS has a bug whereby resize can fire when only scrolling\n                // See: http://stackoverflow.com/questions/8898412\n                var width = $(window).innerWidth();\n\n                if (width !== oldWindowWidth) {\n                    that._resize();\n                    oldWindowWidth = width;\n                }\n            })\n        );\n\n        // DataTables doesn't currently trigger an event when a row is added, so\n        // we need to hook into its private API to enforce the hidden rows when\n        // new data is added\n        dtPrivateSettings.oApi._fnCallbackReg(\n            dtPrivateSettings,\n            'aoRowCreatedCallback',\n            function(tr) {\n                if ($.inArray(false, that.s.current) !== -1) {\n                    $('>td, >th', tr).each(function(i) {\n                        var idx = dt.column.index('toData', i);\n\n                        if (that.s.current[idx] === false) {\n                            $(this).css('display', 'none');\n                        }\n                    });\n                }\n            }\n        );\n\n        // Destroy event handler\n        dt.on('destroy.dtr', function() {\n            dt.off('.dtr');\n            $(dt.table().body()).off('.dtr');\n            $(window).off('resize.dtr orientationchange.dtr');\n            dt.cells('.dtr-control').nodes().to$().removeClass('dtr-control');\n\n            // Restore the columns that we've hidden\n            $.each(that.s.current, function(i, val) {\n                if (val === false) {\n                    that._setColumnVis(i, true);\n                }\n            });\n        });\n\n        // Reorder the breakpoints array here in case they have been added out\n        // of order\n        this.c.breakpoints.sort(function(a, b) {\n            return a.width < b.width ? 1 : a.width > b.width ? -1 : 0;\n        });\n\n        this._classLogic();\n        this._resizeAuto();\n\n        // Details handler\n        var details = this.c.details;\n\n        if (details.type !== false) {\n            that._detailsInit();\n\n            // DataTables will trigger this event on every column it shows and\n            // hides individually\n            dt.on('column-visibility.dtr', function() {\n                // Use a small debounce to allow multiple columns to be set together\n                if (that._timer) {\n                    clearTimeout(that._timer);\n                }\n\n                that._timer = setTimeout(function() {\n                    that._timer = null;\n\n                    that._classLogic();\n                    that._resizeAuto();\n                    that._resize(true);\n\n                    that._redrawChildren();\n                }, 100);\n            });\n\n            // Redraw the details box on each draw which will happen if the data\n            // has changed. This is used until DataTables implements a native\n            // `updated` event for rows\n            dt.on('draw.dtr', function() {\n                that._redrawChildren();\n            });\n\n            $(dt.table().node()).addClass('dtr-' + details.type);\n        }\n\n        dt.on('column-reorder.dtr', function() {\n            that._classLogic();\n            that._resizeAuto();\n            that._resize(true);\n        });\n\n        // Change in column sizes means we need to calc\n        dt.on('column-sizing.dtr', function() {\n            that._resizeAuto();\n            that._resize();\n        });\n\n        // DT2 let's us tell it if we are hiding columns\n        dt.on('column-calc.dt', function(e, d) {\n            var curr = that.s.current;\n\n            for (var i = 0; i < curr.length; i++) {\n                var idx = d.visible.indexOf(i);\n\n                if (curr[i] === false && idx >= 0) {\n                    d.visible.splice(idx, 1);\n                }\n            }\n        });\n\n        // On Ajax reload we want to reopen any child rows which are displayed\n        // by responsive\n        dt.on('preXhr.dtr', function() {\n            var rowIds = [];\n            dt.rows().every(function() {\n                if (this.child.isShown()) {\n                    rowIds.push(this.id(true));\n                }\n            });\n\n            dt.one('draw.dtr', function() {\n                that._resizeAuto();\n                that._resize();\n\n                dt.rows(rowIds).every(function() {\n                    that._detailsDisplay(this, false);\n                });\n            });\n        });\n\n        dt.on('draw.dtr', function() {\n            that._controlClass();\n        }).on('init.dtr', function(e) {\n            if (e.namespace !== 'dt') {\n                return;\n            }\n\n            that._resizeAuto();\n            that._resize();\n\n            // If columns were hidden, then DataTables needs to adjust the\n            // column sizing\n            if ($.inArray(false, that.s.current)) {\n                dt.columns.adjust();\n            }\n        });\n\n        // First pass - draw the table for the current viewport size\n        this._resize();\n    },\n\n    /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\n     * Private methods\n     */\n\n    /**\n     * Get and store nodes from a cell - use for node moving renderers\n     *\n     * @param {*} dt DT instance\n     * @param {*} row Row index\n     * @param {*} col Column index\n     */\n    _childNodes: function(dt, row, col) {\n        var name = row + '-' + col;\n\n        if (this.s.childNodeStore[name]) {\n            return this.s.childNodeStore[name];\n        }\n\n        // https://jsperf.com/childnodes-array-slice-vs-loop\n        var nodes = [];\n        var children = dt.cell(row, col).node().childNodes;\n        for (var i = 0, ien = children.length; i < ien; i++) {\n            nodes.push(children[i]);\n        }\n\n        this.s.childNodeStore[name] = nodes;\n\n        return nodes;\n    },\n\n    /**\n     * Restore nodes from the cache to a table cell\n     *\n     * @param {*} dt DT instance\n     * @param {*} row Row index\n     * @param {*} col Column index\n     */\n    _childNodesRestore: function(dt, row, col) {\n        var name = row + '-' + col;\n\n        if (!this.s.childNodeStore[name]) {\n            return;\n        }\n\n        var node = dt.cell(row, col).node();\n        var store = this.s.childNodeStore[name];\n        var parent = store[0].parentNode;\n        var parentChildren = parent.childNodes;\n        var a = [];\n\n        for (var i = 0, ien = parentChildren.length; i < ien; i++) {\n            a.push(parentChildren[i]);\n        }\n\n        for (var j = 0, jen = a.length; j < jen; j++) {\n            node.appendChild(a[j]);\n        }\n\n        this.s.childNodeStore[name] = undefined;\n    },\n\n    /**\n     * Calculate the visibility for the columns in a table for a given\n     * breakpoint. The result is pre-determined based on the class logic if\n     * class names are used to control all columns, but the width of the table\n     * is also used if there are columns which are to be automatically shown\n     * and hidden.\n     *\n     * @param  {string} breakpoint Breakpoint name to use for the calculation\n     * @return {array} Array of boolean values initiating the visibility of each\n     *   column.\n     *  @private\n     */\n    _columnsVisiblity: function(breakpoint) {\n        var dt = this.s.dt;\n        var columns = this.s.columns;\n        var i, ien;\n\n        // Create an array that defines the column ordering based first on the\n        // column's priority, and secondly the column index. This allows the\n        // columns to be removed from the right if the priority matches\n        var order = columns\n            .map(function(col, idx) {\n                return {\n                    columnIdx: idx,\n                    priority: col.priority\n                };\n            })\n            .sort(function(a, b) {\n                if (a.priority !== b.priority) {\n                    return a.priority - b.priority;\n                }\n                return a.columnIdx - b.columnIdx;\n            });\n\n        // Class logic - determine which columns are in this breakpoint based\n        // on the classes. If no class control (i.e. `auto`) then `-` is used\n        // to indicate this to the rest of the function\n        var display = $.map(columns, function(col, i) {\n            if (dt.column(i).visible() === false) {\n                return 'not-visible';\n            }\n            return col.auto && col.minWidth === null\n                ? false\n                : col.auto === true\n                ? '-'\n                : $.inArray(breakpoint, col.includeIn) !== -1;\n        });\n\n        // Auto column control - first pass: how much width is taken by the\n        // ones that must be included from the non-auto columns\n        var requiredWidth = 0;\n        for (i = 0, ien = display.length; i < ien; i++) {\n            if (display[i] === true) {\n                requiredWidth += columns[i].minWidth;\n            }\n        }\n\n        // Second pass, use up any remaining width for other columns. For\n        // scrolling tables we need to subtract the width of the scrollbar. It\n        // may not be requires which makes this sub-optimal, but it would\n        // require another full redraw to make complete use of those extra few\n        // pixels\n        var scrolling = dt.settings()[0].oScroll;\n        var bar = scrolling.sY || scrolling.sX ? scrolling.iBarWidth : 0;\n        var widthAvailable = dt.table().container().offsetWidth - bar;\n        var usedWidth = widthAvailable - requiredWidth;\n\n        // Control column needs to always be included. This makes it sub-\n        // optimal in terms of using the available with, but to stop layout\n        // thrashing or overflow. Also we need to account for the control column\n        // width first so we know how much width is available for the other\n        // columns, since the control column might not be the first one shown\n        for (i = 0, ien = display.length; i < ien; i++) {\n            if (columns[i].control) {\n                usedWidth -= columns[i].minWidth;\n            }\n        }\n\n        // Allow columns to be shown (counting by priority and then right to\n        // left) until we run out of room\n        var empty = false;\n        for (i = 0, ien = order.length; i < ien; i++) {\n            var colIdx = order[i].columnIdx;\n\n            if (display[colIdx] === '-' && !columns[colIdx].control && columns[colIdx].minWidth) {\n                // Once we've found a column that won't fit we don't let any\n                // others display either, or columns might disappear in the\n                // middle of the table\n                if (empty || usedWidth - columns[colIdx].minWidth < 0) {\n                    empty = true;\n                    display[colIdx] = false;\n                } else {\n                    display[colIdx] = true;\n                }\n\n                usedWidth -= columns[colIdx].minWidth;\n            }\n        }\n\n        // Determine if the 'control' column should be shown (if there is one).\n        // This is the case when there is a hidden column (that is not the\n        // control column). The two loops look inefficient here, but they are\n        // trivial and will fly through. We need to know the outcome from the\n        // first , before the action in the second can be taken\n        var showControl = false;\n\n        for (i = 0, ien = columns.length; i < ien; i++) {\n            if (!columns[i].control && !columns[i].never && display[i] === false) {\n                showControl = true;\n                break;\n            }\n        }\n\n        for (i = 0, ien = columns.length; i < ien; i++) {\n            if (columns[i].control) {\n                display[i] = showControl;\n            }\n\n            // Replace not visible string with false from the control column detection above\n            if (display[i] === 'not-visible') {\n                display[i] = false;\n            }\n        }\n\n        // Finally we need to make sure that there is at least one column that\n        // is visible\n        if ($.inArray(true, display) === -1) {\n            display[0] = true;\n        }\n\n        return display;\n    },\n\n    /**\n     * Create the internal `columns` array with information about the columns\n     * for the table. This includes determining which breakpoints the column\n     * will appear in, based upon class names in the column, which makes up the\n     * vast majority of this method.\n     *\n     * @private\n     */\n    _classLogic: function() {\n        var that = this;\n        var breakpoints = this.c.breakpoints;\n        var dt = this.s.dt;\n        var columns = dt\n            .columns()\n            .eq(0)\n            .map(function(i) {\n                var column = this.column(i);\n                var className = column.header().className;\n                var priority = dt.settings()[0].aoColumns[i].responsivePriority;\n                var dataPriority = column.header().getAttribute('data-priority');\n\n                if (priority === undefined) {\n                    priority =\n                        dataPriority === undefined || dataPriority === null\n                            ? 10000\n                            : dataPriority * 1;\n                }\n\n                return {\n                    className: className,\n                    includeIn: [],\n                    auto: false,\n                    control: false,\n                    never: className.match(/\\b(dtr\\-)?never\\b/) ? true : false,\n                    priority: priority\n                };\n            });\n\n        // Simply add a breakpoint to `includeIn` array, ensuring that there are\n        // no duplicates\n        var add = function(colIdx, name) {\n            var includeIn = columns[colIdx].includeIn;\n\n            if ($.inArray(name, includeIn) === -1) {\n                includeIn.push(name);\n            }\n        };\n\n        var column = function(colIdx, name, operator, matched) {\n            var size, i, ien;\n\n            if (!operator) {\n                columns[colIdx].includeIn.push(name);\n            } else if (operator === 'max-') {\n                // Add this breakpoint and all smaller\n                size = that._find(name).width;\n\n                for (i = 0, ien = breakpoints.length; i < ien; i++) {\n                    if (breakpoints[i].width <= size) {\n                        add(colIdx, breakpoints[i].name);\n                    }\n                }\n            } else if (operator === 'min-') {\n                // Add this breakpoint and all larger\n                size = that._find(name).width;\n\n                for (i = 0, ien = breakpoints.length; i < ien; i++) {\n                    if (breakpoints[i].width >= size) {\n                        add(colIdx, breakpoints[i].name);\n                    }\n                }\n            } else if (operator === 'not-') {\n                // Add all but this breakpoint\n                for (i = 0, ien = breakpoints.length; i < ien; i++) {\n                    if (breakpoints[i].name.indexOf(matched) === -1) {\n                        add(colIdx, breakpoints[i].name);\n                    }\n                }\n            }\n        };\n\n        // Loop over each column and determine if it has a responsive control\n        // class\n        columns.each(function(col, i) {\n            var classNames = col.className.split(' ');\n            var hasClass = false;\n\n            // Split the class name up so multiple rules can be applied if needed\n            for (var k = 0, ken = classNames.length; k < ken; k++) {\n                var className = classNames[k].trim();\n                if (className === 'all' || className === 'dtr-all') {\n                    // Include in all\n                    hasClass = true;\n                    col.includeIn = $.map(breakpoints, function(a) {\n                        return a.name;\n                    });\n                    return;\n                } else if (className === 'none' || className === 'dtr-none' || col.never) {\n                    // Include in none (default) and no auto\n                    hasClass = true;\n                    return;\n                } else if (className === 'control' || className === 'dtr-control') {\n                    // Special column that is only visible, when one of the other\n                    // columns is hidden. This is used for the details control\n                    hasClass = true;\n                    col.control = true;\n                    return;\n                }\n\n                /* eslint-disable no-loop-func */\n                $.each(breakpoints, function(j, breakpoint) {\n                    // Does this column have a class that matches this breakpoint?\n                    var brokenPoint = breakpoint.name.split('-');\n                    var re = new RegExp(\n                        '(min\\\\-|max\\\\-|not\\\\-)?(' + brokenPoint[0] + ')(\\\\-[_a-zA-Z0-9])?'\n                    );\n                    var match = className.match(re);\n\n                    if (match) {\n                        hasClass = true;\n\n                        if (match[2] === brokenPoint[0] && match[3] === '-' + brokenPoint[1]) {\n                            // Class name matches breakpoint name fully\n                            column(i, breakpoint.name, match[1], match[2] + match[3]);\n                        } else if (match[2] === brokenPoint[0] && !match[3]) {\n                            // Class name matched primary breakpoint name with no qualifier\n                            column(i, breakpoint.name, match[1], match[2]);\n                        }\n                    }\n                });\n                /* eslint-enable no-loop-func */\n            }\n\n            // If there was no control class, then automatic sizing is used\n            if (!hasClass) {\n                col.auto = true;\n            }\n        });\n\n        this.s.columns = columns;\n    },\n\n    /**\n     * Update the cells to show the correct control class / button\n     * @private\n     */\n    _controlClass: function() {\n        if (this.c.details.type === 'inline') {\n            var dt = this.s.dt;\n            var columnsVis = this.s.current;\n            var firstVisible = $.inArray(true, columnsVis);\n\n            // Remove from any cells which shouldn't have it\n            dt.cells(\n                null,\n                function(idx) {\n                    return idx !== firstVisible;\n                },\n                {page: 'current'}\n            )\n                .nodes()\n                .to$()\n                .filter('.dtr-control')\n                .removeClass('dtr-control');\n\n            dt.cells(null, firstVisible, {page: 'current'}).nodes().to$().addClass('dtr-control');\n        }\n    },\n\n    /**\n     * Show the details for the child row\n     *\n     * @param  {DataTables.Api} row    API instance for the row\n     * @param  {boolean}        update Update flag\n     * @private\n     */\n    _detailsDisplay: function(row, update) {\n        var that = this;\n        var dt = this.s.dt;\n        var details = this.c.details;\n        var event = function(res) {\n            $(row.node()).toggleClass('parent', res !== false);\n            $(dt.table().node()).triggerHandler('responsive-display.dt', [dt, row, res, update]);\n        };\n\n        if (details && details.type !== false) {\n            var renderer =\n                typeof details.renderer === 'string'\n                    ? Responsive.renderer[details.renderer]()\n                    : details.renderer;\n\n            var res = details.display(\n                row,\n                update,\n                function() {\n                    return renderer.call(that, dt, row[0], that._detailsObj(row[0]));\n                },\n                function() {\n                    event(false);\n                }\n            );\n\n            if (typeof res === 'boolean') {\n                event(res);\n            }\n        }\n    },\n\n    /**\n     * Initialisation for the details handler\n     *\n     * @private\n     */\n    _detailsInit: function() {\n        var that = this;\n        var dt = this.s.dt;\n        var details = this.c.details;\n\n        // The inline type always uses the first child as the target\n        if (details.type === 'inline') {\n            details.target = 'td.dtr-control, th.dtr-control';\n        }\n\n        // Keyboard accessibility\n        dt.on('draw.dtr', function() {\n            that._tabIndexes();\n        });\n        that._tabIndexes(); // Initial draw has already happened\n\n        $(dt.table().body()).on('keyup.dtr', 'td, th', function(e) {\n            if (e.keyCode === 13 && $(this).data('dtr-keyboard')) {\n                $(this).click();\n            }\n        });\n\n        // Type.target can be a string jQuery selector or a column index\n        var target = details.target;\n        var selector = typeof target === 'string' ? target : 'td, th';\n\n        if (target !== undefined || target !== null) {\n            // Click handler to show / hide the details rows when they are available\n            $(dt.table().body()).on('click.dtr mousedown.dtr mouseup.dtr', selector, function(e) {\n                // If the table is not collapsed (i.e. there is no hidden columns)\n                // then take no action\n                if (!$(dt.table().node()).hasClass('collapsed')) {\n                    return;\n                }\n\n                // Check that the row is actually a DataTable's controlled node\n                if ($.inArray($(this).closest('tr').get(0), dt.rows().nodes().toArray()) === -1) {\n                    return;\n                }\n\n                // For column index, we determine if we should act or not in the\n                // handler - otherwise it is already okay\n                if (typeof target === 'number') {\n                    var targetIdx = target < 0 ? dt.columns().eq(0).length + target : target;\n\n                    if (dt.cell(this).index().column !== targetIdx) {\n                        return;\n                    }\n                }\n\n                // $().closest() includes itself in its check\n                var row = dt.row($(this).closest('tr'));\n\n                // Check event type to do an action\n                if (e.type === 'click') {\n                    // The renderer is given as a function so the caller can execute it\n                    // only when they need (i.e. if hiding there is no point is running\n                    // the renderer)\n                    that._detailsDisplay(row, false);\n                } else if (e.type === 'mousedown') {\n                    // For mouse users, prevent the focus ring from showing\n                    $(this).css('outline', 'none');\n                } else if (e.type === 'mouseup') {\n                    // And then re-allow at the end of the click\n                    $(this).trigger('blur').css('outline', '');\n                }\n            });\n        }\n    },\n\n    /**\n     * Get the details to pass to a renderer for a row\n     * @param  {int} rowIdx Row index\n     * @private\n     */\n    _detailsObj: function(rowIdx) {\n        var that = this;\n        var dt = this.s.dt;\n\n        return $.map(this.s.columns, function(col, i) {\n            // Never and control columns should not be passed to the renderer\n            if (col.never || col.control) {\n                return;\n            }\n\n            var dtCol = dt.settings()[0].aoColumns[i];\n\n            return {\n                className: dtCol.sClass,\n                columnIndex: i,\n                data: dt.cell(rowIdx, i).render(that.c.orthogonal),\n                hidden: dt.column(i).visible() && !that.s.current[i],\n                rowIndex: rowIdx,\n                title: dtCol.sTitle !== null ? dtCol.sTitle : $(dt.column(i).header()).text()\n            };\n        });\n    },\n\n    /**\n     * Find a breakpoint object from a name\n     *\n     * @param  {string} name Breakpoint name to find\n     * @return {object}      Breakpoint description object\n     * @private\n     */\n    _find: function(name) {\n        var breakpoints = this.c.breakpoints;\n\n        for (var i = 0, ien = breakpoints.length; i < ien; i++) {\n            if (breakpoints[i].name === name) {\n                return breakpoints[i];\n            }\n        }\n    },\n\n    /**\n     * Re-create the contents of the child rows as the display has changed in\n     * some way.\n     *\n     * @private\n     */\n    _redrawChildren: function() {\n        var that = this;\n        var dt = this.s.dt;\n\n        dt.rows({page: 'current'}).iterator('row', function(settings, idx) {\n            that._detailsDisplay(dt.row(idx), true);\n        });\n    },\n\n    /**\n     * Alter the table display for a resized viewport. This involves first\n     * determining what breakpoint the window currently is in, getting the\n     * column visibilities to apply and then setting them.\n     *\n     * @param  {boolean} forceRedraw Force a redraw\n     * @private\n     */\n    _resize: function(forceRedraw) {\n        var that = this;\n        var dt = this.s.dt;\n        var width = $(window).innerWidth();\n        var breakpoints = this.c.breakpoints;\n        var breakpoint = breakpoints[0].name;\n        var columns = this.s.columns;\n        var i, ien;\n        var oldVis = this.s.current.slice();\n\n        // Determine what breakpoint we are currently at\n        for (i = breakpoints.length - 1; i >= 0; i--) {\n            if (width <= breakpoints[i].width) {\n                breakpoint = breakpoints[i].name;\n                break;\n            }\n        }\n\n        // Show the columns for that break point\n        var columnsVis = this._columnsVisiblity(breakpoint);\n        this.s.current = columnsVis;\n\n        // Set the class before the column visibility is changed so event\n        // listeners know what the state is. Need to determine if there are\n        // any columns that are not visible but can be shown\n        var collapsedClass = false;\n\n        for (i = 0, ien = columns.length; i < ien; i++) {\n            if (\n                columnsVis[i] === false &&\n                !columns[i].never &&\n                !columns[i].control &&\n                !dt.column(i).visible() === false\n            ) {\n                collapsedClass = true;\n                break;\n            }\n        }\n\n        $(dt.table().node()).toggleClass('collapsed', collapsedClass);\n\n        var changed = false;\n        var visible = 0;\n\n        dt.columns()\n            .eq(0)\n            .each(function(colIdx, i) {\n                if (columnsVis[i] === true) {\n                    visible++;\n                }\n\n                if (forceRedraw || columnsVis[i] !== oldVis[i]) {\n                    changed = true;\n                    that._setColumnVis(colIdx, columnsVis[i]);\n                }\n            });\n\n        // Always need to update the display, regardless of if it has changed or not, so nodes\n        // can be re-inserted for listHiddenNodes\n        this._redrawChildren();\n\n        if (changed) {\n            // Inform listeners of the change\n            $(dt.table().node()).trigger('responsive-resize.dt', [dt, this.s.current]);\n\n            // If no records, update the \"No records\" display element\n            if (dt.page.info().recordsDisplay === 0) {\n                $('td', dt.table().body()).eq(0).attr('colspan', visible);\n            }\n        }\n\n        that._controlClass();\n    },\n\n    /**\n     * Determine the width of each column in the table so the auto column hiding\n     * has that information to work with. This method is never going to be 100%\n     * perfect since column widths can change slightly per page, but without\n     * seriously compromising performance this is quite effective.\n     *\n     * @private\n     */\n    _resizeAuto: function() {\n        var dt = this.s.dt;\n        var columns = this.s.columns;\n        var that = this;\n\n        // Are we allowed to do auto sizing?\n        if (!this.c.auto) {\n            return;\n        }\n\n        // Are there any columns that actually need auto-sizing, or do they all\n        // have classes defined\n        if (\n            $.inArray(\n                true,\n                $.map(columns, function(c) {\n                    return c.auto;\n                })\n            ) === -1\n        ) {\n            return;\n        }\n\n        // Need to restore all children. They will be reinstated by a re-render\n        if (!$.isEmptyObject(this.s.childNodeStore)) {\n            $.each(this.s.childNodeStore, function(key) {\n                var idx = key.split('-');\n\n                that._childNodesRestore(dt, idx[0] * 1, idx[1] * 1);\n            });\n        }\n\n        // Clone the table with the current data in it\n        var clonedTable = dt.table().node().cloneNode(false);\n        var clonedHeader = $(dt.table().header().cloneNode(false)).appendTo(clonedTable);\n        var clonedBody = $(dt.table().body()).clone(false, false).empty().appendTo(clonedTable); // Use jQuery because of IE8\n\n        clonedTable.style.width = 'auto';\n\n        // Header\n        var headerCells = dt\n            .columns()\n            .header()\n            .filter(function(idx) {\n                return dt.column(idx).visible();\n            })\n            .to$()\n            .clone(false)\n            .css('display', 'table-cell')\n            .css('width', 'auto')\n            .css('min-width', 0);\n\n        // Body rows - we don't need to take account of DataTables' column\n        // visibility since we implement our own here (hence the `display` set)\n        $(clonedBody)\n            .append($(dt.rows({page: 'current'}).nodes()).clone(false))\n            .find('th, td')\n            .css('display', '');\n\n        // Footer\n        var footer = dt.table().footer();\n        if (footer) {\n            var clonedFooter = $(footer.cloneNode(false)).appendTo(clonedTable);\n            var footerCells = dt\n                .columns()\n                .footer()\n                .filter(function(idx) {\n                    return dt.column(idx).visible();\n                })\n                .to$()\n                .clone(false)\n                .css('display', 'table-cell');\n\n            $('<tr/>').append(footerCells).appendTo(clonedFooter);\n        }\n\n        $('<tr/>').append(headerCells).appendTo(clonedHeader);\n\n        // In the inline case extra padding is applied to the first column to\n        // give space for the show / hide icon. We need to use this in the\n        // calculation\n        if (this.c.details.type === 'inline') {\n            $(clonedTable).addClass('dtr-inline collapsed');\n        }\n\n        // It is unsafe to insert elements with the same name into the DOM\n        // multiple times. For example, cloning and inserting a checked radio\n        // clears the chcecked state of the original radio.\n        $(clonedTable).find('[name]').removeAttr('name');\n\n        // A position absolute table would take the table out of the flow of\n        // our container element, bypassing the height and width (Scroller)\n        $(clonedTable).css('position', 'relative');\n\n        var inserted = $('<div/>')\n            .css({\n                width: 1,\n                height: 1,\n                overflow: 'hidden',\n                clear: 'both'\n            })\n            .append(clonedTable);\n\n        inserted.insertBefore(dt.table().node());\n\n        // The cloned header now contains the smallest that each column can be\n        headerCells.each(function(i) {\n            var idx = dt.column.index('fromVisible', i);\n            columns[idx].minWidth = this.offsetWidth || 0;\n        });\n\n        inserted.remove();\n    },\n\n    /**\n     * Get the state of the current hidden columns - controlled by Responsive only\n     */\n    _responsiveOnlyHidden: function() {\n        var dt = this.s.dt;\n\n        return $.map(this.s.current, function(v, i) {\n            // If the column is hidden by DataTables then it can't be hidden by\n            // Responsive!\n            if (dt.column(i).visible() === false) {\n                return true;\n            }\n            return v;\n        });\n    },\n\n    /**\n     * Set a column's visibility.\n     *\n     * We don't use DataTables' column visibility controls in order to ensure\n     * that column visibility can Responsive can no-exist. Since only IE8+ is\n     * supported (and all evergreen browsers of course) the control of the\n     * display attribute works well.\n     *\n     * @param {integer} col      Column index\n     * @param {boolean} showHide Show or hide (true or false)\n     * @private\n     */\n    _setColumnVis: function(col, showHide) {\n        var that = this;\n        var dt = this.s.dt;\n        var display = showHide ? '' : 'none'; // Empty string will remove the attr\n\n        $(dt.column(col).header()).css('display', display).toggleClass('dtr-hidden', !showHide);\n\n        $(dt.column(col).footer()).css('display', display).toggleClass('dtr-hidden', !showHide);\n\n        dt.column(col).nodes().to$().css('display', display).toggleClass('dtr-hidden', !showHide);\n\n        // If the are child nodes stored, we might need to reinsert them\n        if (!$.isEmptyObject(this.s.childNodeStore)) {\n            dt.cells(null, col)\n                .indexes()\n                .each(function(idx) {\n                    that._childNodesRestore(dt, idx.row, idx.column);\n                });\n        }\n    },\n\n    /**\n     * Update the cell tab indexes for keyboard accessibility. This is called on\n     * every table draw - that is potentially inefficient, but also the least\n     * complex option given that column visibility can change on the fly. Its a\n     * shame user-focus was removed from CSS 3 UI, as it would have solved this\n     * issue with a single CSS statement.\n     *\n     * @private\n     */\n    _tabIndexes: function() {\n        var dt = this.s.dt;\n        var cells = dt.cells({page: 'current'}).nodes().to$();\n        var ctx = dt.settings()[0];\n        var target = this.c.details.target;\n\n        cells.filter('[data-dtr-keyboard]').removeData('[data-dtr-keyboard]');\n\n        if (typeof target === 'number') {\n            dt.cells(null, target, {page: 'current'})\n                .nodes()\n                .to$()\n                .attr('tabIndex', ctx.iTabIndex)\n                .data('dtr-keyboard', 1);\n        } else {\n            // This is a bit of a hack - we need to limit the selected nodes to just\n            // those of this table\n            if (target === 'td:first-child, th:first-child') {\n                target = '>td:first-child, >th:first-child';\n            }\n\n            $(target, dt.rows({page: 'current'}).nodes())\n                .attr('tabIndex', ctx.iTabIndex)\n                .data('dtr-keyboard', 1);\n        }\n    }\n});\n\n/**\n * List of default breakpoints. Each item in the array is an object with two\n * properties:\n *\n * * `name` - the breakpoint name.\n * * `width` - the breakpoint width\n *\n * @name Responsive.breakpoints\n * @static\n */\nResponsive.breakpoints = [\n    {name: 'desktop', width: Infinity},\n    {name: 'tablet-l', width: 1024},\n    {name: 'tablet-p', width: 768},\n    {name: 'mobile-l', width: 480},\n    {name: 'mobile-p', width: 320}\n];\n\n/**\n * Display methods - functions which define how the hidden data should be shown\n * in the table.\n *\n * @namespace\n * @name Responsive.defaults\n * @static\n */\nResponsive.display = {\n    childRow: function(row, update, render) {\n        if (update) {\n            if ($(row.node()).hasClass('parent')) {\n                row.child(render(), 'child').show();\n\n                return true;\n            }\n        } else {\n            if (!row.child.isShown()) {\n                row.child(render(), 'child').show();\n\n                return true;\n            } else {\n                row.child(false);\n\n                return false;\n            }\n        }\n    },\n\n    childRowImmediate: function(row, update, render) {\n        if ((!update && row.child.isShown()) || !row.responsive.hasHidden()) {\n            // User interaction and the row is show, or nothing to show\n            row.child(false);\n\n            return false;\n        } else {\n            // Display\n            row.child(render(), 'child').show();\n\n            return true;\n        }\n    },\n\n    // This is a wrapper so the modal options for Bootstrap and jQuery UI can\n    // have options passed into them. This specific one doesn't need to be a\n    // function but it is for consistency in the `modal` name\n    modal: function(options) {\n        return function(row, update, render, closeCallback) {\n            if (!update) {\n                // Show a modal\n                var close = function() {\n                    modal.remove(); // Will tidy events for us\n                    $(document).off('keypress.dtr');\n                    $(row.node()).removeClass('parent');\n\n                    closeCallback();\n                };\n\n                var modal = $('<div class=\"dtr-modal\"/>')\n                    .append(\n                        $('<div class=\"dtr-modal-display\"/>')\n                            .append(\n                                $('<div class=\"dtr-modal-content\"/>')\n                                    .data('dtr-row-idx', row.index())\n                                    .append(render())\n                            )\n                            .append(\n                                $('<div class=\"dtr-modal-close\">&times;</div>').click(function() {\n                                    close();\n                                })\n                            )\n                    )\n                    .append(\n                        $('<div class=\"dtr-modal-background\"/>').click(function() {\n                            close();\n                        })\n                    )\n                    .appendTo('body');\n\n                $(row.node()).addClass('parent');\n\n                $(document).on('keyup.dtr', function(e) {\n                    if (e.keyCode === 27) {\n                        e.stopPropagation();\n\n                        close();\n                    }\n                });\n            } else {\n                var modal = $('div.dtr-modal-content');\n\n                if (modal.length && row.index() === modal.data('dtr-row-idx')) {\n                    modal.empty().append(render());\n                } else {\n                    // Modal not shown, nothing to update\n                    return null;\n                }\n            }\n\n            if (options && options.header) {\n                $('div.dtr-modal-content').prepend('<h2>' + options.header(row) + '</h2>');\n            }\n\n            return true;\n        };\n    }\n};\n\n/**\n * Display methods - functions which define how the hidden data should be shown\n * in the table.\n *\n * @namespace\n * @name Responsive.defaults\n * @static\n */\nResponsive.renderer = {\n    listHiddenNodes: function() {\n        return function(api, rowIdx, columns) {\n            var that = this;\n            var ul = $('<ul data-dtr-index=\"' + rowIdx + '\" class=\"dtr-details\"/>');\n            var found = false;\n\n            $.each(columns, function(i, col) {\n                if (col.hidden) {\n                    var klass = col.className ? 'class=\"' + col.className + '\"' : '';\n\n                    $(\n                        '<li ' +\n                            klass +\n                            ' data-dtr-index=\"' +\n                            col.columnIndex +\n                            '\" data-dt-row=\"' +\n                            col.rowIndex +\n                            '\" data-dt-column=\"' +\n                            col.columnIndex +\n                            '\">' +\n                            '<span class=\"dtr-title\">' +\n                            col.title +\n                            '</span> ' +\n                            '</li>'\n                    )\n                        .append(\n                            $('<span class=\"dtr-data\"/>').append(\n                                that._childNodes(api, col.rowIndex, col.columnIndex)\n                            )\n                        ) // Api.cell( col.rowIndex, col.columnIndex ).node().childNodes ) )\n                        .appendTo(ul);\n\n                    found = true;\n                }\n            });\n\n            return found ? ul : false;\n        };\n    },\n\n    listHidden: function() {\n        return function(api, rowIdx, columns) {\n            var data = $.map(columns, function(col) {\n                var klass = col.className ? 'class=\"' + col.className + '\"' : '';\n\n                return col.hidden\n                    ? '<li ' +\n                            klass +\n                            ' data-dtr-index=\"' +\n                            col.columnIndex +\n                            '\" data-dt-row=\"' +\n                            col.rowIndex +\n                            '\" data-dt-column=\"' +\n                            col.columnIndex +\n                            '\">' +\n                            '<span class=\"dtr-title\">' +\n                            col.title +\n                            '</span> ' +\n                            '<span class=\"dtr-data\">' +\n                            col.data +\n                            '</span>' +\n                            '</li>'\n                    : '';\n            }).join('');\n\n            return data\n                ? $('<ul data-dtr-index=\"' + rowIdx + '\" class=\"dtr-details\"/>').append(data)\n                : false;\n        };\n    },\n\n    tableAll: function(options) {\n        options = $.extend(\n            {\n                tableClass: ''\n            },\n            options\n        );\n\n        return function(api, rowIdx, columns) {\n            var data = $.map(columns, function(col) {\n                var klass = col.className ? 'class=\"' + col.className + '\"' : '';\n\n                return (\n                    '<tr ' +\n                    klass +\n                    ' data-dt-row=\"' +\n                    col.rowIndex +\n                    '\" data-dt-column=\"' +\n                    col.columnIndex +\n                    '\">' +\n                    '<td>' +\n                    col.title +\n                    ':' +\n                    '</td> ' +\n                    '<td>' +\n                    col.data +\n                    '</td>' +\n                    '</tr>'\n                );\n            }).join('');\n\n            return $('<table class=\"' + options.tableClass + ' dtr-details\" width=\"100%\"/>').append(\n                data\n            );\n        };\n    }\n};\n\n/**\n * Responsive default settings for initialisation\n *\n * @namespace\n * @name Responsive.defaults\n * @static\n */\nResponsive.defaults = {\n    /**\n     * List of breakpoints for the instance. Note that this means that each\n     * instance can have its own breakpoints. Additionally, the breakpoints\n     * cannot be changed once an instance has been creased.\n     *\n     * @type {Array}\n     * @default Takes the value of `Responsive.breakpoints`\n     */\n    breakpoints: Responsive.breakpoints,\n\n    /**\n     * Enable / disable auto hiding calculations. It can help to increase\n     * performance slightly if you disable this option, but all columns would\n     * need to have breakpoint classes assigned to them\n     *\n     * @type {Boolean}\n     * @default  `true`\n     */\n    auto: true,\n\n    /**\n     * Details control. If given as a string value, the `type` property of the\n     * default object is set to that value, and the defaults used for the rest\n     * of the object - this is for ease of implementation.\n     *\n     * The object consists of the following properties:\n     *\n     * * `display` - A function that is used to show and hide the hidden details\n     * * `renderer` - function that is called for display of the child row data.\n     *   The default function will show the data from the hidden columns\n     * * `target` - Used as the selector for what objects to attach the child\n     *   open / close to\n     * * `type` - `false` to disable the details display, `inline` or `column`\n     *   for the two control types\n     *\n     * @type {Object|string}\n     */\n    details: {\n        display: Responsive.display.childRow,\n\n        renderer: Responsive.renderer.listHidden(),\n\n        target: 0,\n\n        type: 'inline'\n    },\n\n    /**\n     * Orthogonal data request option. This is used to define the data type\n     * requested when Responsive gets the data to show in the child row.\n     *\n     * @type {String}\n     */\n    orthogonal: 'display'\n};\n\n/*\n * API\n */\nvar Api = $.fn.dataTable.Api;\n\n// Doesn't do anything - work around for a bug in DT... Not documented\nApi.register('responsive()', function() {\n    return this;\n});\n\nApi.register('responsive.index()', function(li) {\n    li = $(li);\n\n    return {\n        column: li.data('dtr-index'),\n        row: li.parent().data('dtr-index')\n    };\n});\n\nApi.register('responsive.rebuild()', function() {\n    return this.iterator('table', function(ctx) {\n        if (ctx._responsive) {\n            ctx._responsive._classLogic();\n        }\n    });\n});\n\nApi.register('responsive.recalc()', function() {\n    return this.iterator('table', function(ctx) {\n        if (ctx._responsive) {\n            ctx._responsive._resizeAuto();\n            ctx._responsive._resize();\n        }\n    });\n});\n\nApi.register('responsive.hasHidden()', function() {\n    var ctx = this.context[0];\n\n    return ctx._responsive\n        ? $.inArray(false, ctx._responsive._responsiveOnlyHidden()) !== -1\n        : false;\n});\n\nApi.registerPlural('columns().responsiveHidden()', 'column().responsiveHidden()', function() {\n    return this.iterator(\n        'column',\n        function(settings, column) {\n            return settings._responsive\n                ? settings._responsive._responsiveOnlyHidden()[column]\n                : false;\n        },\n        1\n    );\n});\n\n/**\n * Version information\n *\n * @name Responsive.version\n * @static\n */\nResponsive.version = '2.5.0';\n\n$.fn.dataTable.Responsive = Responsive;\n$.fn.DataTable.Responsive = Responsive;\n\n// Attach a listener to the document which listens for DataTables initialisation\n// events so we can automatically initialise\n$(document).on('preInit.dt.dtr', function(e, settings) {\n    if (e.namespace !== 'dt') {\n        return;\n    }\n\n    if (\n        $(settings.nTable).hasClass('responsive') ||\n        $(settings.nTable).hasClass('dt-responsive') ||\n        settings.oInit.responsive ||\n        DataTable.defaults.responsive\n    ) {\n        var init = settings.oInit.responsive;\n\n        if (init !== false) {\n            new Responsive(settings, $.isPlainObject(init) ? init : {});\n        }\n    }\n});\n\n\nreturn DataTable;\n}));"],"names":["factory","define","amd","$","window","document","exports","jq","require","cjsRequires","root","fn","dataTable","module","jQuery","undefined","DataTable","Responsive","settings","opts","versionCheck","s","childNodeStore","columns","current","dt","Api","this","responsive","details","type","c","extend","defaults","_constructor","prototype","that","dtPrivateSettings","oldWindowWidth","innerWidth","_responsive","on","util","throttle","width","_resize","oApi","_fnCallbackReg","tr","inArray","each","i","idx","column","index","css","off","table","body","cells","nodes","to$","removeClass","val","_setColumnVis","breakpoints","sort","a","b","_classLogic","_resizeAuto","_detailsInit","_timer","clearTimeout","setTimeout","_redrawChildren","node","addClass","e","d","curr","length","visible","indexOf","splice","rowIds","rows","every","child","isShown","push","id","one","_detailsDisplay","_controlClass","namespace","adjust","_childNodes","row","col","name","children","cell","childNodes","ien","_childNodesRestore","parentChildren","parentNode","j","jen","appendChild","_columnsVisiblity","breakpoint","order","map","columnIdx","priority","display","auto","minWidth","includeIn","requiredWidth","scrolling","oScroll","bar","sY","sX","iBarWidth","usedWidth","container","offsetWidth","control","empty","colIdx","showControl","never","eq","className","header","aoColumns","responsivePriority","dataPriority","getAttribute","match","add","operator","matched","size","_find","classNames","split","hasClass","k","ken","trim","brokenPoint","re","RegExp","columnsVis","firstVisible","page","filter","update","event","res","toggleClass","triggerHandler","renderer","call","_detailsObj","target","_tabIndexes","keyCode","data","click","selector","closest","get","toArray","targetIdx","trigger","rowIdx","dtCol","sClass","columnIndex","render","orthogonal","hidden","rowIndex","title","sTitle","text","iterator","forceRedraw","oldVis","slice","collapsedClass","changed","info","recordsDisplay","attr","isEmptyObject","key","clonedTable","cloneNode","clonedHeader","appendTo","clonedBody","clone","style","headerCells","append","find","footer","clonedFooter","footerCells","removeAttr","inserted","height","overflow","clear","insertBefore","remove","_responsiveOnlyHidden","v","showHide","indexes","ctx","removeData","iTabIndex","Infinity","childRow","show","childRowImmediate","hasHidden","modal","options","closeCallback","close","stopPropagation","prepend","listHiddenNodes","api","ul","found","klass","listHidden","join","tableAll","tableClass","register","li","parent","context","registerPlural","version","nTable","oInit","init","isPlainObject"],"mappings":"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"}