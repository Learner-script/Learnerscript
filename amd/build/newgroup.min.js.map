{"version":3,"file":"newgroup.min.js","sources":["../src/newgroup.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n/**\n * Add a create new group modal to the page.\n *\n * @module     block_learnerscript/newgroup\n * @class      NewGroup\n * @package\n * @copyright  2017 Damyon Wiese <damyon@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jquery', 'core/str', 'core/modal_factory', 'core/modal_events',\n'core/fragment', 'block_learnerscript/ajax'],\n        function($, Str, ModalFactory, ModalEvents, Fragment, Ajax) {\n\n    /**\n     * Each call to init gets it's own instance of this class.\n     * @param {object} args\n     * @param {string} url\n     */\n    var NewGroup = function(args, url) {\n        this.args = args;\n        this.contextid = 1;\n        this.url = url;\n        this.nodeContent = args.nodeContent || 'ajaxForm';\n        this.init(this.args);\n    };\n\n    /**\n     * @var {Modal} modal\n     * @private\n     */\n    NewGroup.prototype.modal = null;\n\n    /**\n     * @var {int} contextid\n     * @private\n     */\n    NewGroup.prototype.contextid = -1;\n\n    /**\n     * Initialise the class.\n     *\n     * @private\n     * @return {Promise}\n     */\n    NewGroup.prototype.init = function() {\n                var resp = this.getBody();\n                $('body').append(\"<div class='\" + this.nodeContent + \"'></div>\");\n                var self = this;\n                resp.done(function(data) {\n                    $('.ajaxForm').html(data.html);\n                    $('head').append(data.javascript);\n                });\n\n                var dlg = $(\".\" + this.nodeContent).dialog({\n                    resizable: true,\n                    autoOpen: false,\n                    width: \"60%\",\n                    title: this.args.title,\n                    modal: true,\n                    close: function() {\n                        $(this).dialog('destroy').remove();\n                    }\n                });\n                var self = this;\n                $('.' + this.nodeContent + ' .mform').bind('submit', function(e) {\n                    e.preventDefault();\n                    self.submitFormAjax(this);\n                });\n                dlg.dialog(\"open\");\n\n    };\n\n    /**\n     * @param {object} formdata\n     * @method getBody\n     * @private\n     * @return {Promise}\n     */\n    NewGroup.prototype.getBody = function(formdata) {\n        if (typeof formdata === \"undefined\") {\n            formdata = null;\n        } else {\n            // Get the content of the modal.\n           this.args.jsonformdata = JSON.stringify(formdata);\n        }\n\n        var promise = Ajax.call({\n            args: this.args,\n            url: this.url\n            }, false);\n\n        return promise;\n    };\n\n    /**\n     * @param {object} data\n     * @method handleFormSubmissionResponse\n     * @private\n     * @return {Promise}\n     */\n    NewGroup.prototype.handleFormSubmissionResponse = function(data) {\n        if (data.formerror) {\n            $('.ajaxForm').html(data.html);\n            $('head').append(data.javascript);\n                var self = this;\n                $('.' + this.nodeContent + ' .mform').bind('submit', function(e) {\n                    e.preventDefault();\n                    self.submitFormAjax(this);\n                });\n        } else {\n            alert(\"Success!\");\n        }\n    };\n\n    /**\n     * @method handleFormSubmissionFailure\n     * @private\n     * @return {Promise}\n     */\n    NewGroup.prototype.handleFormSubmissionFailure = function() {\n    };\n\n    /**\n     * Private method\n     *\n     * @method submitFormAjax\n     * @param {object} form\n     * @private\n     */\n    NewGroup.prototype.submitFormAjax = function(form) {\n\n        // We don't want to do a real form submission.\n        // Convert all the form elements values to a serialised string.\n        this.args.jsonformdata = $(form).serialize();\n        var self = this;\n            var promise = Ajax.call({\n                args: this.args,\n                url: this.url\n            });\n            promise.done(function(response) {\n                self.handleFormSubmissionResponse(response);\n            }).fail(function() {\n            });\n    };\n\n    /**\n     * This triggers a form submission, so that any mform elements can do final tricks before the form submission is processed.\n     *\n     * @method submitForm\n     * @param {Event} e Form submission event.\n     * @private\n     */\n    NewGroup.prototype.submitForm = function(e) {\n        e.preventDefault();\n        this.modal.getRoot().find('form').submit();\n    };\n\n    return /** @alias module:core_group/newgroup */ {\n        // Public variables and functions.\n        /**\n         * Attach event listeners to initialise this module.\n         *\n         * @method init\n         * @param {string} args The CSS selector used to find nodes that will trigger this module.\n         * @return {Promise}\n         */\n        init: function(args) {\n            return new NewGroup(args);\n        }\n    };\n});\n"],"names":["define","$","Str","ModalFactory","ModalEvents","Fragment","Ajax","NewGroup","args","url","this","contextid","nodeContent","init","prototype","modal","resp","getBody","append","done","data","html","javascript","dlg","dialog","resizable","autoOpen","width","title","close","remove","self","bind","e","preventDefault","submitFormAjax","formdata","jsonformdata","JSON","stringify","call","handleFormSubmissionResponse","formerror","alert","handleFormSubmissionFailure","form","serialize","response","fail","submitForm","getRoot","find","submit"],"mappings":";;;;;;;;;AAuBAA,sCAAO,CAAC,SAAU,WAAY,qBAAsB,oBACpD,gBAAiB,6BACT,SAASC,EAAGC,IAAKC,aAAcC,YAAaC,SAAUC,MAO1D,IAAIC,SAAW,SAASC,KAAMC,KAC1BC,KAAKF,KAAOA,KACZE,KAAKC,UAAY,EACjBD,KAAKD,IAAMA,IACXC,KAAKE,YAAcJ,KAAKI,aAAe,WACvCF,KAAKG,KAAKH,KAAKF,OAsInB,OA/HAD,SAASO,UAAUC,MAAQ,KAM3BR,SAASO,UAAUH,WAAa,EAQhCJ,SAASO,UAAUD,KAAO,WACd,IAAIG,KAAON,KAAKO,UAChBhB,EAAE,QAAQiB,OAAO,eAAiBR,KAAKE,YAAc,YAErDI,KAAKG,MAAK,SAASC,MACfnB,EAAE,aAAaoB,KAAKD,KAAKC,MACzBpB,EAAE,QAAQiB,OAAOE,KAAKE,eAG1B,IAAIC,IAAMtB,EAAE,IAAMS,KAAKE,aAAaY,OAAO,CACvCC,WAAW,EACXC,UAAU,EACVC,MAAO,MACPC,MAAOlB,KAAKF,KAAKoB,MACjBb,OAAO,EACPc,MAAO,WACH5B,EAAES,MAAMc,OAAO,WAAWM,YAG9BC,KAAOrB,KACXT,EAAE,IAAMS,KAAKE,YAAc,WAAWoB,KAAK,UAAU,SAASC,GAC1DA,EAAEC,iBACFH,KAAKI,eAAezB,SAExBa,IAAIC,OAAO,SAUvBjB,SAASO,UAAUG,QAAU,SAASmB,UAalC,YAZwB,IAAbA,SACPA,SAAW,KAGZ1B,KAAKF,KAAK6B,aAAeC,KAAKC,UAAUH,UAG7B9B,KAAKkC,KAAK,CACpBhC,KAAME,KAAKF,KACXC,IAAKC,KAAKD,MACP,IAWXF,SAASO,UAAU2B,6BAA+B,SAASrB,MACvD,GAAIA,KAAKsB,UAAW,CAChBzC,EAAE,aAAaoB,KAAKD,KAAKC,MACzBpB,EAAE,QAAQiB,OAAOE,KAAKE,YAClB,IAAIS,KAAOrB,KACXT,EAAE,IAAMS,KAAKE,YAAc,WAAWoB,KAAK,UAAU,SAASC,GAC1DA,EAAEC,iBACFH,KAAKI,eAAezB,cAG5BiC,MAAM,aASdpC,SAASO,UAAU8B,4BAA8B,aAUjDrC,SAASO,UAAUqB,eAAiB,SAASU,MAIzCnC,KAAKF,KAAK6B,aAAepC,EAAE4C,MAAMC,YACjC,IAAIf,KAAOrB,KACOJ,KAAKkC,KAAK,CACpBhC,KAAME,KAAKF,KACXC,IAAKC,KAAKD,MAENU,MAAK,SAAS4B,UAClBhB,KAAKU,6BAA6BM,aACnCC,MAAK,gBAWhBzC,SAASO,UAAUmC,WAAa,SAAShB,GACrCA,EAAEC,iBACFxB,KAAKK,MAAMmC,UAAUC,KAAK,QAAQC,UAGU,CAS5CvC,KAAM,SAASL,MACX,OAAO,IAAID,SAASC,OAGhC"}